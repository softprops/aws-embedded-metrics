var N=null,E="",T="t",U="u",searchIndex={};
var R=["string","result","try_from","try_into","borrow_mut","borrow","type_id","typeid","default","MetricLogger"];

searchIndex["aws_embedded_metrics"]={"doc":"Provides an interface for recording high cardinality…","i":[[3,R[9],"aws_embedded_metrics","Metric logging interface",N,N],[4,"Unit",E,"Metric unit types",N,N],[13,"Seconds",E,E,0,N],[13,"Microseconds",E,E,0,N],[13,"Milliseconds",E,E,0,N],[13,"Bytes",E,E,0,N],[13,"Kilobytes",E,E,0,N],[13,"Megabytes",E,E,0,N],[13,"Gigabytes",E,E,0,N],[13,"Terabytes",E,E,0,N],[13,"Bits",E,E,0,N],[13,"Kilobits",E,E,0,N],[13,"Megabits",E,E,0,N],[13,"Gigabits",E,E,0,N],[13,"Terabits",E,E,0,N],[13,"Percent",E,E,0,N],[13,"Count",E,E,0,N],[13,"BytesPerSecond",E,E,0,N],[13,"KilobytesPerSecond",E,E,0,N],[13,"MegabytesPerSecond",E,E,0,N],[13,"GigabytesPerSecond",E,E,0,N],[13,"TerabytesPerSecond",E,E,0,N],[13,"BitsPerSecond",E,E,0,N],[13,"KilobitsPerSecond",E,E,0,N],[13,"MegabitsPerSecond",E,E,0,N],[13,"GigabitsPerSecond",E,E,0,N],[13,"TerabitsPerSecond",E,E,0,N],[13,"CountPerSecond",E,E,0,N],[13,"None",E,E,0,N],[5,"metric_scope",E,"Central api for logging acquiring metric logger",N,[[],[T]]],[11,"flush",E,"Flushes the current context state to the configured sink.",1,[[["self"]]]],[11,"set_namespace",E,"Set the CloudWatch namespace that metrics should be…",1,[[["self"]]]],[11,"set_property",E,"Set an aribtrary property on the published metrics. This…",1,[[["self"]]]],[11,"put_dimensions",E,"Adds a dimension. This is generally a low cardinality…",1,[[["self"],[R[0]],["hashmap",[R[0],R[0]]]]]],[11,"put_metric",E,"Put a metric value. This value will be emitted to…",1,[[["self"],["unit"]]]],[14,"dimensions",E,E,N,N],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[2],E,E,1,[[[U]],[R[1]]]],[11,R[3],E,E,1,[[],[R[1]]]],[11,R[4],E,E,1,[[["self"]],[T]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[R[7]]]],[11,"to_owned",E,E,0,[[["self"]],[T]]],[11,"clone_into",E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[2],E,E,0,[[[U]],[R[1]]]],[11,R[3],E,E,0,[[],[R[1]]]],[11,R[4],E,E,0,[[["self"]],[T]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[R[7]]]],[11,"drop",E,E,1,[[["self"]]]],[11,R[8],E,E,0,[[],["unit"]]],[11,R[8],E,E,1,[[],["metriclogger"]]],[11,"clone",E,E,0,[[["self"]],["unit"]]],[11,"fmt",E,E,0,[[["self"],["formatter"]],[R[1]]]],[11,"serialize",E,E,0,[[["self"],["__s"]],[R[1]]]]],"p":[[4,"Unit"],[3,R[9]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);